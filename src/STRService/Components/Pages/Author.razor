@page "/author/{Name}"
@inject IDbContextFactory<SwateTemplateDb> SwateTemplateDbContextFactory
@rendermode InteractiveServer

<h1>Author - <mark>@Name</mark></h1>

@if (metadata == null)
{
    <p><em>Loading...</em></p>
}
else
{
   <p>Total Templates: @(metadata.Length)</p>
   <p>Total Downloads: @(downloads?.Sum(d => d.DownloadCount))</p>

   <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Version</th>
                <th>Downloads</th>
                <th>Id</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in metadata)
            {
                <tr>
                    <td><a href="template/@item.Id">@(item.Name)</a></td>
                    <td>@(item.Description)</td>
                    <td>@(item.GetSemanticVersionString())</td>
                    <td>@(downloads?.First(d => d.TemplateId == item.Id).DownloadCount)</td>
                    <td>@(item.Id)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string Name { get; set; }

    private SwateTemplateMetadata[]? metadata;

    private Downloads[]? downloads;

    protected override async Task OnInitializedAsync()
    {
        using SwateTemplateDb database = SwateTemplateDbContextFactory.CreateDbContext();

        var metadata0 = await database.Metadata
            .Where(m => m.Authors.Any(a => a.FullName == Name))
            .Where(m => m.BuildMetadataVersionSuffix == "" && m.BuildMetadataVersionSuffix == "")
            .ToArrayAsync();

        var latestMetadata = metadata0
            .GroupBy(m => m.Id)
            .Select(m =>
                m.ToArray()
                    .OrderByDescending(m => m.MajorVersion)
                    .ThenByDescending(p => p.MinorVersion)
                    .ThenByDescending(p => p.PatchVersion)
                    .First()
            )
            .ToArray();

        // var downloadsTask = metadata0.Select(m => GetDownloadAsync(m));
        // var downloads0 = await Task.WhenAll(downloadsTask);
        var downloadsAll = await database.Downloads.ToArrayAsync();
        var downloadsFiltered = downloadsAll.Where(d => latestMetadata.Any(m => m.Id == d.TemplateId && m.MajorVersion == d.TemplateMajorVersion && m.MinorVersion == d.TemplateMinorVersion && m.PatchVersion == d.TemplatePatchVersion)).ToArray();

        metadata = latestMetadata;
        downloads = downloadsFiltered;
    }

    // public async Task<Downloads> GetDownloadAsync(Metadata meta)
    // {
    //     using SwateTemplateDb database = SwateTemplateDbContextFactory.CreateDbContext();
    //     {
    //         return await database.Downloads
    //                         .FirstAsync(d => d.TemplateName == meta.Name && d.TemplateMajorVersion == meta.MajorVersion && d.TemplateMinorVersion == meta.MinorVersion && d.TemplatePatchVersion == meta.PatchVersion);
    //     }
    // }
}
